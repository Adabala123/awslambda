name: Ecs Autoscaling

on:
 schedule:
    - cron: "*/5 * * * *"

jobs:
  check_cloudwatch_alarms:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: AWS CLI Setup
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Replace with your AWS region

      - name: Monitor CloudWatch Alarms and Update ECS Service
        run: |
          # Monitor CloudWatch Alarms and capture the result
          alarm_state=$(aws cloudwatch describe-alarms --alarm-names myalarm --query 'MetricAlarms[0].StateValue' --output text)
  
          # Define scaling thresholds
          scale_up_threshold=70
          scale_down_threshold=30

          # Get current ECS service desired count
          current_desired_count=$(aws ecs describe-services --cluster mycluster --services myservice --query 'services[0].desiredCount' --output text)
  
          # Check the alarm status and adjust ECS service desired count accordingly
          if [ "$alarm_status" != "OK" ]; then
            echo "Alarm status is not OK. Scaling ECS service up."
            aws ecs update-service --cluster mycluster --service myservice --desired-count $((current_desired_count + 1))
          elif [ "$current_desired_count" -gt 1 ] && [ "$alarm_status" = "OK" ]; then
            echo "Alarm status is OK. Scaling ECS service down."
            aws ecs update-service --cluster mycluster --service myservice --desired-count $((current_desired_count - 1))
          else
            echo "Alarm status is OK. No action needed."
          fi
           
